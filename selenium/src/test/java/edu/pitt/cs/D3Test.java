package edu.pitt.cs;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.experimental.theories.suppliers.TestedOn;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import static org.hamcrest.MatcherAssert.assertThat;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;


import static org.hamcrest.MatcherAssert.assertThat;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class D3Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;

  @Before
  public void setUp() {
    driver = new FirefoxDriver(); //Firefox browser version >= 105 is installed and launched.
    js = (JavascriptExecutor) driver;
    driver.get("http://localhost:8080"); //The URL https://cs1632.appspot.com/ is open on the web browser.
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";"); //Set cookies
    vars = new HashMap<String, Object>();
    //driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
  }

  @After
  public void tearDown() {
    driver.quit();
  }

  /*
   * IDENTIFIER: TEST-1-LINKS
    TEST CASE: Check that the "Reset" link properly points to `/reset`.
    PRECONDITIONS: None.
    EXECUTION STEPS: None.
    POSTCONDITIONS: The href link of the "Reset" menu item points to `/reset`.
   */
  @Test
  public void tEST1LINKS() { //good
    {
        WebElement element = driver.findElement(By.linkText("Reset"));
        String attribute = element.getAttribute("href");
        vars.put("reset_href", attribute);
    }
    assertEquals(vars.get("reset_href").toString(), "http://localhost:8080/reset");
  }

  /*
   * IDENTIFIER: TEST-2-RESET
    TEST CASE: Given that cats ID 1, 2, and 3 have been rented out,
    check that resetting the system results in all cats being available.
    PRECONDITIONS: The value of cookies "1", "2", and "3" are set to "true" (cat ID 1, 2, 3 are rented).
    EXECUTION STEPS:
    1. Press the "Reset" link.
    POSTCONDITIONS: 
    1. The first item in the cat listing is "ID 1. Jennyanydots".
    2. The second item in the cat listing is "ID 2. Old Deuteronomy".
    3. The third item in the cat listing is "ID 3. Mistoffelees".
   */
  @Test
  public void tEST2RESET() {
    js.executeScript("document.cookie = \"1=true\";document.cookie = \"2=true\";document.cookie = \"3=true\";");
    driver.findElement(By.linkText("Reset")).click();
    assertThat(driver.findElement(By.xpath("//div/ul/li")).getText(), is("ID 1. Jennyanydots"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[2]")).getText(), is("ID 2. Old Deuteronomy"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
  }

  /*
   * IDENTIFIER: TEST-3-CATALOG
    TEST CASE: Check that the second item in the catalog is an image named "cat2.jpg".
    PRECONDITIONS: None.
    EXECUTION STEPS:
    1. Press the "Catalog" link.
    POSTCONDITIONS: The source of the second image in the catalog is "/images/cat2.jpg".
   */
  @Test
  public void tEST3CATALOG() {
    driver.findElement(By.linkText("Catalog")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//li[2]/img"));
      assert(elements.size() > 0);
    }
    {
      WebElement element = driver.findElement(By.xpath("//li[2]/img"));
      String attribute = element.getAttribute("src");
      vars.put("img", attribute);
    }
    assertEquals(vars.get("img").toString(), "http://localhost:8080/images/cat2.jpg");
}

/*
 *  IDENTIFIER: TEST-4-LISTING
    TEST CASE: Check that the listing has three cats and the third is "ID 3. Mistoffelees".
    PRECONDITIONS: None.
    EXECUTION STEPS:
    1. Press the "Catalog" link.
    POSTCONDITIONS: 
    1. There are exactly three items in the listing.
    2. The text in the third item is "ID 3. Mistoffelees".
*/

    @Test
    public void tEST4LISTING() {
        driver.findElement(By.linkText("Catalog")).click();
        {
          List<WebElement> elements = driver.findElements(By.xpath("//div/ul/li[3]"));
          assert(elements.size() > 0);
        }
        {
          List<WebElement> elements = driver.findElements(By.xpath("//div/ul/li[4]"));
          assert(elements.size() == 0);
        }
        assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
    }

/*
IDENTIFIER: TEST-5-RENT-A-CAT
TEST CASE: Check that the "Rent" and "Return" buttons exist in the Rent-A-Cat page.
PRECONDITIONS: None.
EXECUTION STEPS:
1. Press the "Rent-A-Cat" link.
POSTCONDITIONS: 
1. A "Rent" button exists on the page.
2. A "Return" button exists on the page.
*/
@Test
public void tEST5RENTACAT() {
    driver.get("http://localhost:8080");
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[@onclick=\'rentSubmit()\']"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[@onclick=\'returnSubmit()\']"));
      assert(elements.size() > 0);
    }
  }

/*
IDENTIFIER: TEST-6-RENT
TEST CASE: Check that renting cat ID 1 works as expected.
PRECONDITIONS: None.
EXECUTION STEPS:
1. Press the "Rent-A-Cat" link.
2. Enter "1" into the input box for the rented cat ID.
3. Press the "Rent" button.
POSTCONDITIONS: 
1. The first item in the cat listing is "Rented out".
2. The second item in the cat listing is "ID 2. Old Deuteronomy".
3. The third item in the cat listing is "ID 3. Mistoffelees".
4. The text "Success!" appears beside the "Rent" button.
*/

@Test
public void tEST6RENT() {
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    driver.findElement(By.xpath("//input[@id=\'rentID\']")).sendKeys("1");
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    assertThat(driver.findElement(By.xpath("//div/ul/li")).getText(), is("Rented out"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[2]")).getText(), is("ID 2. Old Deuteronomy"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
    assertThat(driver.findElement(By.xpath("//div[@id=\'rentResult\']")).getText(), is("Success!"));
}

/*
IDENTIFIER: TEST-7-RETURN
TEST CASE: Check that returning cat ID 2 works as expected.
PRECONDITIONS: The value of cookie "2" is set to "true" (cat ID 2 is rented).
EXECUTION STEPS:
1. Press the "Rent-A-Cat" link.
2. Enter "2" into the input box for the returned cat ID.
3. Press the "Return" button.
POSTCONDITIONS: 
1. The first item in the cat listing is "ID 1. Jennyanydots".
2. The second item in the cat listing is "ID 2. Old Deuteronomy".
3. The third item in the cat listing is "ID 3. Mistoffelees".
4. The text "Success!" appears beside the "Return" button.
 */
@Test
public void tEST7RETURN() {
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=true\";document.cookie = \"3=false\";");
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    driver.findElement(By.id("returnID")).sendKeys("2");
    driver.findElement(By.xpath("//button[@onclick=\'returnSubmit()\']")).click();
    assertThat(driver.findElement(By.xpath("//div/ul/li")).getText(), is("ID 1. Jennyanydots"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[2]")).getText(), is("ID 2. Old Deuteronomy"));
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
    assertThat(driver.findElement(By.xpath("//div[@id=\'returnResult\']")).getText(), is("Success!"));
}
/*
IDENTIFIER: TEST-8-FEED-A-CAT
TEST CASE: Check that the "Feed" button exists in the Feed-A-Cat page.
PRECONDITIONS: None.
EXECUTION STEPS:
1. Press the "Feed-A-Cat" link.
POSTCONDITIONS: 
1. A "Feed" button exists on the page.
*/
@Test
public void tEST8FEEDACAT() {
    driver.findElement(By.xpath("//a[contains(text(),\'Feed-A-Cat\')]")).click();
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[@onclick=\'feedSubmit()\']"));
      assert(elements.size() > 0);
    }
}

/*
IDENTIFIER: TEST-9-FEED
TEST CASE: Check that feeding 6 catnips to 3 cats results in "Nom, nom, nom.".
PRECONDITIONS: None.
EXECUTION STEPS:
1. Press the "Feed-A-Cat" link.
2. Enter "6" into the input box for number of catnips.
3. Press the "Feed" button.
POSTCONDITIONS: 
1. The text "Nom, nom, nom." appears beside the "Feed" button.
 */
@Test
public void tEST9FEED() {
    driver.findElement(By.xpath("//a[contains(text(),\'Feed-A-Cat\')]")).click();
    driver.findElement(By.xpath("//input[@id=\'catnips\']")).sendKeys("6");
    driver.findElement(By.xpath("//button[@onclick=\'feedSubmit()\']")).click();
    assertThat(driver.findElement(By.xpath("//div[@id=\'feedResult\']")).getText(), is("Nom, nom, nom."));
}

/*
IDENTIFIER: TEST-10-GREET-A-CAT
TEST CASE: Check that 3 cats respond with three "Meow!"s in the Greet-A-Cat page.
PRECONDITIONS: None.
EXECUTION STEPS:
1. Press the "Greet-A-Cat" link.
POSTCONDITIONS: 
1. The text "Meow!Meow!Meow!" appears on the page.
 */
@Test
public void tEST10GREETACAT() {
    driver.findElement(By.xpath("//a[contains(text(),\'Greet-A-Cat\')]")).click();
    assertThat(driver.findElement(By.xpath("//div[@id=\'greeting\']/h4")).getText(), is("Meow!Meow!Meow!"));
}

/*
IDENTIFIER: TEST-11-GREET-A-CAT-WITH-NAME
TEST CASE: Check that greeting Jennyanydots results in "Meow!"s in the Greet-A-Cat page.
PRECONDITIONS: None.
EXECUTION STEPS:
1. Navigate to the `/greet-a-cat/Jennyanydots` URL by opening on browser.
POSTCONDITIONS: 
1. The text "Meow! from Jennyanydots." appears on the page.
 */
@Test
public void tEST11GREETACATWITHNAME() {
    driver.get("http://localhost:8080/greet-a-cat/Jennyanydots");
    assertThat(driver.findElement(By.xpath("//div[@id=\'greeting\']/h4")).getText(), is("Meow! from Jennyanydots."));
}
}